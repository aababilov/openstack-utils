#!/bin/bash

DB_USER=${DB_USER:-nova}
DB_PWD=${DB_PWD:-nova}


# this is a line to retrieve admin's token from diablo keystone database
# mysql -unova -pnova keystone -e "select id from token where user_id = (select id from users where name='admin' limit 1) order by expires desc limit 1;" -B | tail -1

function get_date() {
    date '+%Y.%m.%d-%H.%M'
}

function do_essex_setup() {
    sed -i "s#^sql_connection.*#sql_connection = mysql://${DB_USER}:${DB_PWD}@main-node/glance#" /etc/glance/glance-{api,registry}.conf
    sed -i "s#^sql_connection.*#sql_connection = mysql://${DB_USER}:${DB_PWD}@main-node/nova#" /etc/nova/nova.conf
    sed -i "s#^connection.*#connection = mysql://${DB_USER}:${DB_PWD}@main-node/keystone#" /etc/keystone/keystone.conf
    sed -i 's#localhost#main-node#' /etc/keystone/default_catalog.templates

    KEYSTONE_CLIENTS=$(echo /etc/glance/glance-{registry,api}-paste.ini /etc/nova/api-paste.ini)
    ADMIN_PASSWORD="$1"
    echo "keystone ADMIN_PASSWORD is ${ADMIN_PASSWORD}"
    sed -i 's#%SERVICE_TENANT_NAME%#systenant#' $KEYSTONE_CLIENTS
    sed -i 's#%SERVICE_USER%#admin#' $KEYSTONE_CLIENTS
    sed -i "s#%SERVICE_PASSWORD%#${ADMIN_PASSWORD}#" $KEYSTONE_CLIENTS
}

function keystone_client() {
    keystone --endpoint http://main-node:35357/v2.0 --token ADMIN "$@"
}

function get_id() {
    line=$(keystone_client "$1-list" | grep "$2")
    if [ "$?" != "0" ]; then
        return 1
    fi
    echo $line | while read a id c; do echo $id; done
}

function do_essex_keystone_db() {
    ADMIN_PASSWORD=$(grep admin_password /etc/nova/api-paste.ini | sed -r 's/^.*\s(\S+)\s*$/\1/')
    echo "setting keystone ADMIN_PASSWORD to ${ADMIN_PASSWORD}"

    /etc/init.d/keystone restart
    sleep 2
    set -e
    get_id tenant systenant >/dev/null || keystone_client tenant-create --name systenant
    get_id role Admin >/dev/null || keystone_client role-create --name Admin
    ADMIN_USER_ID=$(get_id user admin)
    if [ -n "$ADMIN_USER_ID" ]; then
        keystone_client user-password-update --pass "$ADMIN_PASSWORD" "$ADMIN_USER_ID"
    else
        keystone_client user-create --name admin --pass "$ADMIN_PASSWORD"
        ADMIN_USER_ID=$(get_id user admin)
    fi
    keystone_client user-role-add --user "$ADMIN_USER_ID" --role `get_id role Admin` --tenant_id `get_id tenant systenant`
    echo "admin user is updated"
}

function do_diablo_setup() {
    sed -i "s#^sql_connection.*#sql_connection = mysql://${DB_USER}:${DB_PWD}@main-node/glance#" /etc/glance/glance-registry.conf
    sed -i "s#^--sql_connection.*#--sql_connection=mysql://${DB_USER}:${DB_PWD}@main-node/nova#" /etc/nova/nova.conf
    sed -i "s#^sql_connection.*#sql_connection = mysql://${DB_USER}:${DB_PWD}@main-node/keystone#" /etc/keystone/keystone.conf

    cp /etc/keystone/nova-api-paste.ini /etc/nova/api-paste.ini
    sed -i 's#^pipeline.*apiv1app.*$#pipeline = versionnegotiation authtoken auth-context apiv1app#' /etc/glance/glance-api.conf
    sed -i 's#^pipeline.*registryapp.*$#pipeline = authtoken auth-context registryapp#' /etc/glance/glance-registry.conf

    KEYSTONE_CLIENTS=$(echo /etc/glance/glance-{registry,api}.conf /etc/nova/api-paste.ini)
    ADMIN_TOKEN="$1"
    echo "keystone ADMIN_TOKEN is ${ADMIN_TOKEN}"
    sed -i "s#999888777666#${ADMIN_TOKEN}#" $KEYSTONE_CLIENTS
}

function do_diablo_keystone_db() {
    ADMIN_TOKEN=$(grep admin_token /etc/nova/api-paste.ini | sed -r 's/^.*\s(\S+)\s*$/\1/')
    echo "setting keystone ADMIN_TOKEN to ${ADMIN_TOKEN}"

    mysql -unova -pnova keystone -e "insert into token (id, user_id, tenant_id, expires) values ('${ADMIN_TOKEN}', 1, 1, '2015-01-01 00:00:00');"
    /etc/init.d/keystone restart
}

function do_purge() {
    rm -rfv /etc/{glance,nova,keystone}
}

function do_save() {
    tar -cvzf "${1:-.}/openstack-etc.$(get_date).tar.gz" /etc/{glance,nova,keystone}
}

function do_unpack() {
    tar -xvf "$1" -C /
}


ACTION="$1"
shift

case "$ACTION" in
    save)
        do_save
	;;
    replace)
	do_purge
	do_unpack "$@"
	;;
    purge)
	do_purge
	;;
    setup|keystone_db)
        nova-manage version | grep -q '^2011' && RELEASE="diablo" || RELEASE="essex"
        echo "$ACTION for $RELEASE"
        EXTRA=""
        if [ "$ACTION" == setup ]; then
            [ -z "$2" ] && EXTRA="$(uuidgen)" || EXTRA="$2"
        fi
        "do_${RELEASE}_${ACTION}" $EXTRA
        ;;
    *)
        echo "Usage: $0 (save|replace|purge|setup|keystone_db)"
        exit 1
        ;;
esac
